-- Standard awesome library
local gears = require("gears")
local awful = require("awful")
local gmath = require("gears.math")
require("awful.autofocus")

-- Widget and layout library
local wibox = require("wibox")

-- Theme handling library
local beautiful = require("beautiful")

-- Notification library
local naughty = require("naughty")
local menubar = require("menubar")
local hotkeys_popup = require("awful.hotkeys_popup").widget

-- Vicious
local vicious = require("vicious")
vicious.contrib = require("vicious.contrib")

-- The hidden tag
local HIDDEN_TAG = "-HIDDEN-"

-- Enable hotkeys help widget for VIM and other apps
-- when client with a matching name is opened:
require("awful.hotkeys_popup.keys")

-- {{{ Error handling
-- Check if awesome encountered an error during startup and fell back to
-- another config (This code will only ever execute for the fallback config)
if awesome.startup_errors then
  naughty.notify({ preset = naughty.config.presets.critical,
                   title = "Oops, there were errors during startup!",
                   text = awesome.startup_errors })
end

-- Handle runtime errors after startup
do
    local in_error = false
    awesome.connect_signal("debug::error", function (err)
        -- Make sure we don't go into an endless error loop
        if in_error then return end
        in_error = true

        naughty.notify({ preset = naughty.config.presets.critical,
                         title = "Oops, an error happened!",
                         text = tostring(err) })
        in_error = false
    end)
end
-- }}}

-- {{{ Variable definitions
-- Themes define colours, icons, font and wallpapers.
beautiful.init(awful.util.getdir("config") .. "/theme.lua" )

local function set_wallpaper(s)
  -- Wallpaper
  if beautiful.wallpaper then
    local wallpaper = beautiful.wallpaper
    -- If wallpaper is a function, call it with the screen
    if type(wallpaper) == "function" then
      wallpaper = wallpaper(s)
    end
    gears.wallpaper.maximized(wallpaper, s, true)
  end
end

-- Re-set wallpaper when a screen's geometry changes (e.g. different resolution)
screen.connect_signal("property::geometry", set_wallpaper)

-- This is used later as the default terminal and editor to run.
terminal = "kitty"
editor = os.getenv("EDITOR") or "emacs"
editor_cmd = terminal .. " -e " .. editor

-- Default modkey.
modkey = "Mod4"

-- Table of layouts to cover with awful.layout.inc, order matters.
awful.layout.layouts = {
  awful.layout.suit.tile,
  awful.layout.suit.max
}
-- }}}

-- {{{ Helper functions
local function client_menu_toggle_fn()
    local instance = nil

    return function ()
        if instance and instance.wibox.visible then
            instance:hide()
            instance = nil
        else
            instance = awful.menu.clients({ theme = { width = 250 } })
        end
    end
end
-- }}}

-- Create a wibox for each screen and add it
local taglist_buttons = gears.table.join(
                    awful.button({ }, 1, function(t) t:view_only() end),
                    awful.button({ modkey }, 1, function(t)
                                              if client.focus then
                                                  client.focus:move_to_tag(t)
                                              end
                                          end),
                    awful.button({ }, 3, awful.tag.viewtoggle),
                    awful.button({ modkey }, 3, function(t)
                                              if client.focus then
                                                  client.focus:toggle_tag(t)
                                              end
                                          end),
                    awful.button({ }, 4, function(t) awful.tag.viewnext(t.screen) end),
                    awful.button({ }, 5, function(t) awful.tag.viewprev(t.screen) end)
                )

local tasklist_buttons = gears.table.join(
  awful.button({ }, 1, function (c)
      client.focus = c
      c:raise()
  end)
)

function color_span(value, _color)
  return string.format("<span color=\"%s\">%s</span>", _color, value)
end

function color_numeric_value(value, args)
  local color = "white"
  if args.high and value > args.high then
    color = args.highcolor or beautiful.colors.light_red
  elseif args.normal and value > args.normal then
    color = args.normalcolor or "white"
  elseif args.low and value < args.low then
    color = args.lowcolor or beautiful.colors.light_green
  end
  return color_span(value, color)
end

function cpu_format_callback(widget, cpu_percents)
  local cpu = cpu_percents[1]
  return "CPU: " .. color_numeric_value(cpu, { low = 10, high = 50 }) .. "%"
end

function temp_format_callback(widget, temp_list)
  local temp = temp_list[1]
  return "Temp: " .. color_numeric_value(temp, { low = 40, high = 60 }) .. "°C"
end

function volume_format_callback(widget, volume_info)
  local volume = volume_info[1]
  local color = nil
  local state = nil
  if volume_info[2] == "on" then
    state = "[on]"
    color = beautiful.colors.light_green
  else
    state = "[off]"
    color = beautiful.colors.light_red
  end
  return string.format("Volume: %d%% %s", volume, color_span(state, color))
end

function mem_format_callback(widget, mem_info)
  local mem = mem_info[1]
  return string.format("Mem: %s%%", color_numeric_value(mem, { low = 20, high = 80 }))
end

function wifi_format_callback(widget, wifi_info)
  return string.format("Wireless: %s %s%%", wifi_info["{ssid}"],
                       color_numeric_value(wifi_info["{linp}"], { low = 30,
                                                                  high = 85,
                                                                  lowcolor = beautiful.colors.light_red,
                                                                  highcolor = beautiful.colors.light_green}))
end

function battery_format_callback(widget, bat_info)
  local state, percent, remaining = table.unpack(bat_info)
  local status = "Battery"
  if state == "↯" then
    remaining = "Full"
  elseif state == "+" then
    status = color_span("Charging", beautiful.colors.light_green)
  end
  return string.format("%s: %s%% / %s",
                       status,
                       color_numeric_value(percent, { low = 35,
                                                      high = 75,
                                                      lowcolor = beautiful.colors.light_red,
                                                      highcolor = beautiful.colors.light_green}),
                       remaining)
end

function tasklist_filter_callback(c, screen)
  local layout  = awful.layout.getname(awful.layout.get(s))
  if layout ~= "max" then
    theme.tasklist_bg_focus = theme.colors.base3
    return awful.widget.tasklist.filter.focused(c, screen)
  else
    theme.tasklist_bg_focus = theme.colors.base1
    return awful.widget.tasklist.filter.currenttags(c, screen)
  end
end

awful.screen.connect_for_each_screen(function(s)
    -- Wallpaper
    set_wallpaper(s)

    -- Each screen has its own tag table.
    awful.tag({ "1:term", "2:emacs", "3:web", "4", "5", "6", "7:IDA", "8:steam", "9", HIDDEN_TAG }, s, awful.layout.layouts[1])

    -- Create a promptbox for each screen
    s.mypromptbox = awful.widget.prompt()

    -- Create a taglist widget
    s.mytaglist = awful.widget.taglist(s, function (t)
                                            if t.name == HIDDEN_TAG and not t.selected then
                                               return false
                                            else
                                               return awful.widget.taglist.filter.noempty(t)
                                            end
                                          end, taglist_buttons)

    -- Create a tasklist widget
    s.mytasklist = awful.widget.tasklist(s, tasklist_filter_callback, tasklist_buttons,
                                         {
                                           tasklist_disable_icon = true,
                                         }
    )

    -- Create the wibox
    s.mywibox = awful.wibar({ position = "bottom", screen = s })

    -- cpu text widget
    local cpuwidget = wibox.widget.textbox()
    vicious.register(cpuwidget, vicious.widgets.cpu, cpu_format_callback, 3)

    -- temp text widget
    local tempwidget = wibox.widget.textbox()
    vicious.register(tempwidget, vicious.widgets.thermal, temp_format_callback, 3, "thermal_zone1")

    -- volume text widget
    local volwidget = wibox.widget.textbox()
    vicious.register(volwidget, vicious.contrib.pulse, volume_format_callback, 3, "alsa_output.pci-0000_00_1f.3-platform-skl_hda_dsp_generic.HiFi__hw_sofhdadsp__sink")

    -- memory text widget
    local memwidget = wibox.widget.textbox()
    vicious.register(memwidget, vicious.widgets.mem, mem_format_callback, 3)

    -- wifi text widget
    local wifiwidget = wibox.widget.textbox()
    vicious.register(wifiwidget, vicious.widgets.wifiiw, wifi_format_callback, 10, "wlan0")

    -- battery text widget
    local batwidget = wibox.widget.textbox()
    vicious.register(batwidget, vicious.widgets.bat, battery_format_callback, 10, "BAT0")

    local spacer = wibox.widget.textbox(" | ")

    local clockwidget = wibox.widget.textclock(color_span("%a %b %_d %Y %r", beautiful.colors.yellow) , 1)

    -- Add widgets to the wibox
    s.mywibox:setup {
        layout = wibox.layout.align.horizontal,
        { -- Left widgets
            layout = wibox.layout.fixed.horizontal,
            s.mytaglist,
            s.mypromptbox,
            spacer,
            wibox.container.constraint(s.mytasklist, "exact", 800, nil)
        },
        nil, -- Middle widget
        { -- Right widgets
          layout = wibox.layout.fixed.horizontal,
          cpuwidget,
          spacer,
          tempwidget,
          spacer,
          volwidget,
          spacer,
          memwidget,
          spacer,
          wifiwidget,
          spacer,
          batwidget,
          spacer,
          clockwidget
        },
    }
end)
-- }}}

-- {{{ Mouse bindings
root.buttons(gears.table.join(
    awful.button({ }, 4, awful.tag.viewnext),
    awful.button({ }, 5, awful.tag.viewprev)
))
-- }}}

-- {{{ Key bindings
globalkeys = gears.table.join(
    awful.key({ modkey,           }, "s",      hotkeys_popup.show_help,
              {description="show help", group="awesome"}),
    awful.key({ modkey,           }, "b",   function ()
          awful.tag.viewprev()
          if awful.screen.focused().selected_tag.name == HIDDEN_TAG then
             awful.tag.viewprev()
          end
    end,
              {description = "view previous", group = "tag"}),
    awful.key({ modkey,           }, "f",  function ()
          awful.tag.viewnext()
          if awful.screen.focused().selected_tag.name == HIDDEN_TAG then
             awful.tag.viewnext()
          end
    end,
              {description = "view next", group = "tag"}),
    awful.key({ modkey,           }, "Tab", awful.tag.history.restore,
              {description = "go back", group = "tag"}),
    awful.key({ modkey,           }, "u", function ()
          awful.tag.find_by_name(awful.screen.focused(), HIDDEN_TAG):view_only()
    end,
              {description = "go to hidden tag", group = "tag"}),

    -- Standard program
    awful.key({ modkey, "Shift"   }, "Return", function () awful.spawn(terminal) end,
              {description = "open a terminal", group = "launcher"}),
    awful.key({ modkey,           }, "q", awesome.restart,
              {description = "reload awesome", group = "awesome"}),
    awful.key({ modkey, "Shift"   }, "q", awesome.quit,
              {description = "quit awesome", group = "awesome"}),

    awful.key({ modkey,           }, "l",     function () awful.tag.incmwfact( 0.05)          end,
              {description = "increase master width factor", group = "layout"}),
    awful.key({ modkey,           }, "h",     function () awful.tag.incmwfact(-0.05)          end,
              {description = "decrease master width factor", group = "layout"}),
    awful.key({ modkey            }, ",",     function () awful.tag.incnmaster( 1, nil, true) end,
      {description = "increase the number of master clients", group = "layout"}),
    awful.key({ modkey            }, ".",     function () awful.tag.incnmaster(-1, nil, true) end,
      {description = "decrease the number of master clients", group = "layout"}),
    awful.key({ modkey, "Control" }, "h",     function () awful.tag.incncol( 1, nil, true)    end,
              {description = "increase the number of columns", group = "layout"}),
    awful.key({ modkey, "Control" }, "l",     function () awful.tag.incncol(-1, nil, true)    end,
              {description = "decrease the number of columns", group = "layout"}),

    awful.key({ modkey,           }, "j", function () awful.client.focus.byidx(-1) end,
      {description = "focus previous by index", group = "client"}),
    awful.key({ modkey,           }, "k", function () awful.client.focus.byidx(1) end,
      {description = "focus next by index", group = "client"}),
    awful.key({ modkey, "Shift"   }, "j", function () awful.client.swap.byidx(-1) end,
      {description = "swap with previous client by index", group = "client"}),
    awful.key({ modkey, "Shift"   }, "k", function () awful.client.swap.byidx(1) end,
      {description = "swap with next client by index", group = "client"}),

    awful.key({ modkey }, "space", function () awful.layout.inc( 1)                end,
      {description = "select next", group = "layout"}),
    awful.key({ modkey, "Shift" }, "space", function () awful.layout.inc(-1)                end,
      {description = "select previous", group = "layout"}),

    -- Media Keys
    awful.key({ }, "XF86AudioMute", function () awful.util.spawn("pamixer --toggle-mute") end),
    awful.key({ }, "XF86AudioLowerVolume", function () awful.util.spawn("pamixer --decrease 5") end),
    awful.key({ }, "XF86AudioRaiseVolume", function () awful.util.spawn("pamixer --increase 5") end),
    awful.key({ }, "XF86MonBrightnessDown", function () awful.util.spawn("light -U 5") end),
    awful.key({ }, "XF86MonBrightnessUp", function () awful.util.spawn("light -A 5") end),
    awful.key({ }, "XF86Search", function () awful.util.spawn("toggle-brightness") end),

    -- Menubar
    awful.key({ modkey }, "p",
      function()
        awful.util.spawn("rofi -show run -location 2 -width 100 -theme solarized -matching fuzzy -dpi 1")
      end,
      {description = "show the menubar", group = "launcher"}),

    awful.key({ modkey }, "y",
      function()
        for s in screen do
          s.mywibox.visible = not screen[s].mywibox.visible
        end
      end,
      {description = "Toggle the wibar", group = "layout"})
)

function move_client_to_relative_tag(client, idx)
  local all_tags = awful.screen.focused().tags

  -- Ignore the 'hidden' tag
  local tags = table.unpack(all_tags, 1, #all_tags-1)
  local t = awful.screen.focused().selected_tag
  if t == nil then
    return
  end
  client:move_to_tag(tags[gmath.cycle(#tags, t.index + idx)])
end

clientkeys = gears.table.join(
    awful.key({ modkey, "Shift"   }, "c",      function (c) c:kill()                         end,
              {description = "close", group = "client"}),
    awful.key({ modkey,           }, "t",  awful.client.floating.toggle                     ,
              {description = "toggle floating", group = "client"}),
    awful.key({ modkey,           }, "Return", function (c) c:swap(awful.client.getmaster()) end,
              {description = "move to master", group = "client"}),
    awful.key({ modkey,           }, "m",
        function (c)
            c.maximized = not c.maximized
            c:raise()
        end ,
        {description = "(un)maximize", group = "client"}),

    awful.key({ modkey, "Shift" }, "f", function(c) move_client_to_relative_tag(c, 1) end,
      { description = "Move client to next tag"}),
    awful.key({ modkey, "Shift" }, "b", function(c) move_client_to_relative_tag(c, -1) end,
      { description = "Move client to previous tag"}),
    awful.key({ modkey, "Shift" }, "u", function(c)
          local tag = awful.tag.find_by_name(awful.screen.focused(), HIDDEN_TAG)
          c:move_to_tag(tag)
    end,
      { description = "Move client to hidden tag"})
)

-- Bind all key numbers to tags.
-- Be careful: we use keycodes to make it work on any keyboard layout.
-- This should map on the top row of your keyboard, usually 1 to 9.
for i = 1, 9 do
    globalkeys = gears.table.join(globalkeys,
        -- View tag only.
        awful.key({ modkey }, "#" .. i + 9,
                  function ()
                        local screen = awful.screen.focused()
                        local tag = screen.tags[i]
                        if tag then
                           tag:view_only()
                        end
                  end,
                  {description = "view tag #"..i, group = "tag"}),
        -- Toggle tag display.
        awful.key({ modkey, "Control" }, "#" .. i + 9,
                  function ()
                      local screen = awful.screen.focused()
                      local tag = screen.tags[i]
                      if tag then
                         awful.tag.viewtoggle(tag)
                      end
                  end,
                  {description = "toggle tag #" .. i, group = "tag"}),

        -- Move client to tag.
        awful.key({ modkey, "Shift" }, "#" .. i + 9,
                  function ()
                    if client.focus then
                          local tag = client.focus.screen.tags[i]
                          if tag then
                              client.focus:move_to_tag(tag)
                          end
                     end
                  end,
                  {description = "move focused client to tag #"..i, group = "tag"})
    )
end

clientbuttons = gears.table.join(
    awful.button({ }, 1, function (c) client.focus = c; c:raise() end),
    awful.button({ modkey }, 1, awful.mouse.client.move),
    awful.button({ modkey }, 3, awful.mouse.client.resize))

-- Set keys
root.keys(globalkeys)
-- }}}

-- {{{ Rules
-- Rules to apply to new clients (through the "manage" signal).
awful.rules.rules = {
    -- All clients will match this rule.
    { rule = { },
      properties = { border_width = beautiful.border_width,
                     border_color = beautiful.border_normal,
                     focus = awful.client.focus.filter,
                     raise = true,
                     keys = clientkeys,
                     buttons = clientbuttons,
                     screen = awful.screen.preferred,
                     placement = awful.placement.no_overlap+awful.placement.no_offscreen,
                     size_hints_honor = false -- Don't leave pixles at the bottom
      }
    },

    -- Floating clients.
    { rule_any = {
        instance = {
          "DTA",  -- Firefox addon DownThemAll.
          "copyq",  -- Includes session name in class.
        },
        class = {
          "Arandr",
          "Gpick",
          "Kruler",
          "MessageWin",  -- kalarm.
          "Sxiv",
          "Wpa_gui",
          "pinentry",
          "veromix",
          "xtightvncviewer"},

        name = {
          "Event Tester",  -- xev.
        },
        role = {
          "AlarmWindow",  -- Thunderbird's calendar.
          "pop-up",       -- e.g. Google Chrome's (detached) Developer Tools.
        }
      }, properties = { floating = true }},

    -- Add titlebars to normal clients and dialogs
    { rule_any = {type = { "dialog" }
      }, properties = { titlebars_enabled = true, above = true }
    },
}
-- }}}

-- {{{ Signals
-- Signal function to execute when a new client appears.
client.connect_signal("manage", function (c)
    -- Set the windows at the slave,
    -- i.e. put it at the end of others instead of setting it master.
    -- if not awesome.startup then awful.client.setslave(c) end

    if awesome.startup and
      not c.size_hints.user_position
      and not c.size_hints.program_position then
        -- Prevent clients from being unreachable after screen count changes.
        awful.placement.no_offscreen(c)
    end
end)

-- Add a titlebar if titlebars_enabled is set to true in the rules.
client.connect_signal("request::titlebars", function(c)
    -- buttons for the titlebar
    local buttons = gears.table.join(
        awful.button({ }, 1, function()
            client.focus = c
            c:raise()
            awful.mouse.client.move(c)
        end),
        awful.button({ }, 3, function()
            client.focus = c
            c:raise()
            awful.mouse.client.resize(c)
        end)
    )

    awful.titlebar(c) : setup {
        { -- Left
            awful.titlebar.widget.iconwidget(c),
            buttons = buttons,
            layout  = wibox.layout.fixed.horizontal
        },
        { -- Middle
            { -- Title
                align  = "center",
                widget = awful.titlebar.widget.titlewidget(c)
            },
            buttons = buttons,
            layout  = wibox.layout.flex.horizontal
        },
        { -- Right
            awful.titlebar.widget.floatingbutton (c),
            awful.titlebar.widget.maximizedbutton(c),
            awful.titlebar.widget.stickybutton   (c),
            awful.titlebar.widget.ontopbutton    (c),
            awful.titlebar.widget.closebutton    (c),
            layout = wibox.layout.fixed.horizontal()
        },
        layout = wibox.layout.align.horizontal
    }
end)

-- Enable sloppy focus, so that focus follows mouse.
client.connect_signal("mouse::enter", function(c)
    awful.client.focus.byidx(0, c)
end)

-- No border for maximized clients

client.connect_signal("focus",
  function(c)
    if c.maximized_horizontal == true and c.maximized_vertical == true then
      c.border_color = beautiful.border_normal
    else
      c.border_color = beautiful.border_focus
    end
  end)

client.connect_signal("unfocus",
  function(c) c.border_color = beautiful.border_normal
  end)

-- Arrange signal handler
for s = 1, screen.count() do screen[s]:connect_signal("arrange",
  function ()
    local clients = awful.client.visible(s)
    local layout  = awful.layout.getname(awful.layout.get(s))

    -- Force an update of the tasklist when the layout changes to enable
    -- the 'tab' mode (see tasklist_filter_callback).
    screen[s].mytasklist._do_tasklist_update()

    if #clients > 0 then -- Fine grained borders and floaters control
      for _, c in pairs(clients) do -- Floaters always have borders

        -- Supress maximized (to prevent bug where firefox goes maximized if you click
        -- near the tab but not on it)
        if c.maximized == true then
          c.maximized = false;
        end

        if awful.client.floating.get(c) or layout == "floating" then
          c.border_width = beautiful.border_width

        -- No borders with only one visible client
        elseif #clients == 1 or layout == "max" then
          c.border_width = 0
        else
          c.border_width = beautiful.border_width
        end
      end
    end
  end)
end
